version: '3.8'

services:
  # PostgreSQL Operator 服务 (多架构)
  postgres-operator:
    build:
      context: .
      dockerfile: Dockerfile.builder
      target: runtime
      platforms:
        - linux/amd64
        - linux/arm64
    image: postgres-operator:latest
    ports:
      - "8080:8080"
      - "8443:8443"
      - "8091:8091"
    environment:
      - PGO_NAMESPACE=postgres-operator
      - CRUNCHY_DEBUG=true
      - PGO_FEATURE_GATES=AllAlpha=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
    restart: unless-stopped
    depends_on:
      - postgres-test

  # 构建辅助服务（多架构）
  postgres-operator-builder:
    build:
      context: .
      dockerfile: Dockerfile.builder
      target: builder
      platforms:
        - linux/amd64
        - linux/arm64
    image: postgres-operator:builder
    volumes:
      - ./bin:/output
    command: >
      sh -c "
        echo '=== 开始多架构构建 ===' &&
        echo 'Architecture: '$(uname -m) &&
        echo 'Platform: '$(uname -a) &&
        mkdir -p /output &&
        if [ -f /app/bin/postgres-operator ]; then
          cp /app/bin/postgres-operator /output/postgres-operator-$(uname -m) &&
          echo '=== 构建结果已复制到 ./bin/postgres-operator-'$(uname -m)' ==='
        else
          echo '❌ 构建失败：未找到二进制文件'
          exit 1
        fi
      "

  # PostgreSQL 测试数据库
  postgres-test:
    image: postgres:16-alpine
    environment:
      - POSTGRES_DB=testdb
      - POSTGRES_USER=testuser
      - POSTGRES_PASSWORD=testpass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U testuser -d testdb"]
      interval: 30s
      timeout: 10s
      retries: 3

  # pgAdmin 管理界面
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      - PGADMIN_DEFAULT_EMAIL=admin@example.com
      - PGADMIN_DEFAULT_PASSWORD=admin123
      - PGADMIN_CONFIG_ENHANCED_COOKIE_PROTECTION=True
      - PGADMIN_CONFIG_LOGIN_BANNER="PostgreSQL Operator Testing Environment"
    ports:
      - "8081:80"  # 避免与 operator 的 8080 端口冲突
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    restart: unless-stopped
    depends_on:
      - postgres-test

volumes:
  postgres_data:
    driver: local
  pgadmin_data:
    driver: local

networks:
  default:
    name: postgres-operator-network
    driver: bridge
